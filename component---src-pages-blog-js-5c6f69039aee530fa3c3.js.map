{"version":3,"sources":["webpack:///./src/pages/blog.js","webpack:///./src/components/header.js","webpack:///./src/components/footer.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_3__","blogPage","_ref","data","a","createElement","title","className","allMarkdownRemark","edges","map","post","key","node","id","to","frontmatter","path","image","author","date","Header","siteTitle","react_default","style","gatsby_browser_entry","defaultProps","Footer","href","Layout","children","query","render","Fragment","header","site","siteMetadata","footer","_755544856","SEO","description","lang","meta","keywords","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_3__","detailsQuery","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"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","file":"component---src-pages-blog-js-5c6f69039aee530fa3c3.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\n\nconst blogPage = ({ data }) => (\n  <Layout>\n    <SEO title=\"blog\" />\n    <span className=\"yellow-bgcolor dark-color\"></span>\n    <h1 className=\"page-title yellow-bgcolor dark-color\">Latest Posts</h1>\n    {data.allMarkdownRemark.edges.map(post => (\n      <div key={post.node.id}>\n        <h3>\n          <Link to={post.node.frontmatter.path}>\n            {post.node.frontmatter.title}\n          </Link>\n          {post.node.frontmatter.image}\n        </h3>\n        <small>\n          Posted by{' '}\n          <span className=\"yellow-color\">{post.node.frontmatter.author}</span>{' '}\n          on <span className=\"yellow-color\">{post.node.frontmatter.date} </span>\n        </small>\n        <br />\n        <br />\n        <hr />\n      </div>\n    ))}\n  </Layout>\n)\n\nexport const pageQuery = graphql`\n  query BlogasIndexQuery {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          frontmatter {\n            path\n            title\n            date\n            author\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default blogPage\n","import { Link } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n// import Menu from '../components/menu'\n\nconst Header = ({ siteTitle }) => (\n  <header className=\"header-container\">\n    <div className=\"container\">\n      <h1 style={{}}>\n        <Link to=\"/\">{siteTitle}</Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","import React from 'react'\n\nconst Footer = () => (\n  <footer>\n    <div className=\"container\">\n      <div className=\"delimiter\"></div>\n      <p>\n        Â© 2019, Built with <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n      </p>\n    </div>\n  </footer>\n)\n\nexport default Footer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport Header from './header'\nimport Footer from './footer'\nimport './layout.css'\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div className=\"container\">\n          {children}\n        </div>\n        <Footer />\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n"],"sourceRoot":""}